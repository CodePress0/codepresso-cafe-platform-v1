<%@ page pageEncoding="UTF-8" %>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>
<footer class="footer">
    <div class="container">
        © CodePress. All rights reserved.
        <!--
          로그인 상태일 때만 로그아웃 링크 표시
          - pageContext.request.userPrincipal: 인증된 사용자가 있으면 null이 아님
          - 지금은 기능을 나중에 붙일 예정이므로 단순 링크만 제공합니다.
        -->
        <c:if test="${pageContext.request.userPrincipal != null}">
            <span style="margin-left:12px;">
                <!-- POST /logout 로 전환 (CSRF 활성화 시 hidden 토큰 추가 예정) -->
                <form method="post" action="/logout" style="display:inline;">
                    <button type="submit" style="background:none;border:0;color:inherit;cursor:pointer;text-decoration:none;">로그아웃</button>
                </form>
            </span>
        </c:if>
    </div>
</footer>

<!-- 매장 선택 모달 (로그인 상태일 때만) -->
<c:if test="${pageContext.request.userPrincipal != null}">
    <%@ include file="/WEB-INF/views/branch/branch-select-modal.jspf" %>

    <script>
    (function() {
        const headerBranchName = document.getElementById('headerBranchName');
        const branchModal = document.getElementById('branchSelectModal');
        const branchModalOverlay = document.getElementById('branchSelectOverlay');
        const branchModalGrid = document.getElementById('branchModalGrid');
        const branchModalCloseBtn = branchModal ? branchModal.querySelector('.branch-modal-close') : null;
        const branchModalLoadMore = document.getElementById('branchModalLoadMore');
        const branchModalSearchInput = document.getElementById('branchModalSearchInput');
        const branchModalSearchButton = document.getElementById('branchModalSearchButton');
        const branchModalLocateButton = document.getElementById('branchModalLocateButton');
        const branchOpenButtons = document.querySelectorAll('[data-open-branch-modal]');

        let modalNextPage = 1;
        const modalPageSize = 6;
        let branchModalQuery = '';
        let branchModalLat = null;
        let branchModalLng = null;
        const branchModalRadius = 2;

        // 모달 열기/닫기
        const toggleBodyScroll = (shouldLock) => {
            if (shouldLock) {
                document.body.classList.add('modal-open');
            } else {
                document.body.classList.remove('modal-open');
            }
        };

        const openBranchModal = () => {
            if (!branchModal || !branchModalOverlay) return;
            branchModal.classList.remove('is-hidden');
            branchModalOverlay.classList.remove('is-hidden');
            toggleBodyScroll(true);

            // 모달 열 때 매장 목록 로드
            if (branchModalGrid && branchModalGrid.children.length === 0) {
                fetchBranches({ page: 0, append: false });
            }
        };

        const closeBranchModal = () => {
            if (!branchModal || !branchModalOverlay) return;
            branchModal.classList.add('is-hidden');
            branchModalOverlay.classList.add('is-hidden');
            toggleBodyScroll(false);
        };

        // 거리 계산
        const distKm = (lat1, lng1, lat2, lng2) => {
            const R = 6371;
            const toRad = d => d * Math.PI / 180;
            const dLat = toRad(lat2 - lat1);
            const dLng = toRad(lng2 - lng1);
            const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(toRad(lat1)) * Math.cos(toRad(lat2)) *
                    Math.sin(dLng / 2) * Math.sin(dLng / 2);
            const c = 2 * Math.asin(Math.sqrt(a));
            return R * c;
        };

        const distanceParts = (km) => {
            if (!Number.isFinite(km)) return null;
            if (km < 1) {
                const meters = Math.round(km * 1000);
                return { value: String(meters), unit: 'm' };
            }
            return { value: km.toFixed(1), unit: 'km' };
        };

        const renderDistances = (lat, lng, root) => {
            if (lat == null || lng == null) return;
            const scope = root || document;
            scope.querySelectorAll('.branch-card').forEach(card => {
                const cardLat = parseFloat(card.getAttribute('data-lat'));
                const cardLng = parseFloat(card.getAttribute('data-lng'));
                if (!Number.isFinite(cardLat) || !Number.isFinite(cardLng)) return;
                const km = distKm(lat, lng, cardLat, cardLng);
                const distanceEl = card.querySelector('.branch-distance');
                if (distanceEl) {
                    const parts = distanceParts(km);
                    distanceEl.textContent = '';
                    if (parts) {
                        const valueSpan = document.createElement('span');
                        valueSpan.className = 'branch-distance-value';
                        valueSpan.textContent = parts.value;
                        const unitSpan = document.createElement('span');
                        unitSpan.className = 'branch-distance-unit';
                        unitSpan.textContent = parts.unit;
                        distanceEl.appendChild(valueSpan);
                        distanceEl.appendChild(unitSpan);
                    }
                }
            });
        };

        // 영업 시간 체크
        const minutesFromHm = (str) => {
            if (!str) return null;
            const parts = String(str).split(':');
            const h = parseInt(parts[0], 10);
            const m = parseInt(parts[1] || '0', 10);
            if (!Number.isFinite(h) || !Number.isFinite(m)) return null;
            return h * 60 + m;
        };

        const isOpenNow = (openStr, closeStr) => {
            const open = minutesFromHm(openStr);
            const close = minutesFromHm(closeStr);
            if (open == null || close == null) return false;
            const now = new Date();
            const current = now.getHours() * 60 + now.getMinutes();
            if (open === close) return true;
            if (close > open) return current >= open && current < close;
            return current >= open || current < close;
        };

        const renderOpenBadges = (root) => {
            if (!root) return;
            root.querySelectorAll('.badge-open').forEach(badge => {
                const open = badge.getAttribute('data-open');
                const close = badge.getAttribute('data-close');
                if (!open || !close) {
                    badge.textContent = '';
                    return;
                }
                const openNow = isOpenNow(open, close);
                badge.textContent = openNow ? '주문 가능' : '영업 종료';
                badge.classList.toggle('is-closed', !openNow);
            });
        };

        // URL 빌더
        const buildBranchPageUrl = (page) => {
            const url = new URL('/branch/page', window.location.origin);
            url.searchParams.set('page', page);
            url.searchParams.set('size', modalPageSize);
            if (branchModalQuery) {
                url.searchParams.set('q', branchModalQuery);
            } else if (branchModalLat != null && branchModalLng != null) {
                url.searchParams.set('lat', branchModalLat);
                url.searchParams.set('lng', branchModalLng);
                url.searchParams.set('radius', branchModalRadius);
            }
            return url;
        };

        // 매장 목록 가져오기
        const fetchBranches = async ({ page, append } = { page: 0, append: false }) => {
            if (!branchModal) return;
            try {
                if (append && branchModalLoadMore) {
                    branchModalLoadMore.disabled = true;
                }
                const res = await fetch(buildBranchPageUrl(page), { headers: { 'X-Requested-With': 'XMLHttpRequest' } });
                if (!res.ok) throw new Error('매장 목록을 불러오지 못했습니다.');
                const html = await res.text();
                if (!append && branchModalGrid) {
                    branchModalGrid.innerHTML = '';
                }
                if (html && html.trim().length > 0 && branchModalGrid) {
                    const temp = document.createElement('div');
                    temp.innerHTML = html;
                    renderOpenBadges(temp);
                    renderDistances(branchModalLat, branchModalLng, temp);
                    Array.from(temp.children).forEach(child => branchModalGrid.appendChild(child));
                } else if (!append && branchModalGrid) {
                    branchModalGrid.innerHTML = '<div class="branch-modal-empty">조건에 맞는 매장이 없습니다.</div>';
                }
                const hasNext = res.headers.get('X-Has-Next') === 'true';
                modalNextPage = hasNext ? page + 1 : null;
                if (branchModalLoadMore) {
                    branchModalLoadMore.classList.toggle('is-hidden', !hasNext);
                    branchModalLoadMore.disabled = false;
                }
            } catch (error) {
                console.error(error);
                if (append && branchModalLoadMore) {
                    branchModalLoadMore.disabled = false;
                }
            }
        };

        // 검색
        const handleBranchSearch = () => {
            if (!branchModalSearchInput) return;
            branchModalQuery = branchModalSearchInput.value.trim();
            if (branchModalQuery.length > 0) {
                branchModalLat = null;
                branchModalLng = null;
            }
            fetchBranches({ page: 0, append: false });
        };

        // 위치 기반 검색
        const resetLocateButtonLabel = (label) => {
            if (branchModalLocateButton) {
                branchModalLocateButton.disabled = false;
                branchModalLocateButton.textContent = label || '내 주변 매장';
            }
        };

        const handleBranchLocate = () => {
            if (!branchModalLocateButton) return;
            const originalText = branchModalLocateButton.textContent;
            if (!('geolocation' in navigator)) {
                alert('이 브라우저는 위치 정보를 지원하지 않습니다.');
                return;
            }
            branchModalLocateButton.disabled = true;
            branchModalLocateButton.textContent = '위치 확인 중...';
            navigator.geolocation.getCurrentPosition(position => {
                branchModalLat = position.coords.latitude;
                branchModalLng = position.coords.longitude;
                branchModalQuery = '';
                if (branchModalSearchInput) {
                    branchModalSearchInput.value = '';
                }
                fetchBranches({ page: 0, append: false }).finally(() => resetLocateButtonLabel(originalText));
            }, () => {
                alert('위치 정보를 가져올 수 없습니다. 위치 권한을 확인해주세요.');
                resetLocateButtonLabel(originalText);
            }, { enableHighAccuracy: true, timeout: 5000 });
        };

        // 매장 선택
        const handleBranchCardClick = (event) => {
            const card = event.target.closest('.branch-card');
            if (!card || !branchModalGrid || !branchModalGrid.contains(card)) return;
            const branchId = card.getAttribute('data-branch-id');
            const branchName = card.getAttribute('data-name') || (card.querySelector('.branch-name') ? card.querySelector('.branch-name').textContent.trim() : '선택한 매장');

            // 로컬스토리지에 저장
            if (window.branchSelection && window.branchSelection.save) {
                window.branchSelection.save({ id: branchId, name: branchName });
            }

            // 헤더 업데이트
            updateHeaderBranch();

            closeBranchModal();
        };

        // 더 보기
        const loadMoreBranches = () => {
            if (modalNextPage == null) {
                if (branchModalLoadMore) branchModalLoadMore.classList.add('is-hidden');
                return;
            }
            fetchBranches({ page: modalNextPage, append: true });
        };

        // 헤더 업데이트
        function updateHeaderBranch() {
            const selected = window.branchSelection && window.branchSelection.load
                ? window.branchSelection.load()
                : null;

            if (headerBranchName) {
                if (selected && selected.name) {
                    headerBranchName.textContent = selected.name;
                } else {
                    headerBranchName.textContent = '매장 선택';
                }
            }
        }

        // 이벤트 리스너 등록
        if (branchModalGrid) {
            branchModalGrid.addEventListener('click', handleBranchCardClick);
        }
        branchOpenButtons.forEach(btn => btn.addEventListener('click', openBranchModal));
        if (branchModalOverlay) {
            branchModalOverlay.addEventListener('click', closeBranchModal);
        }
        if (branchModalCloseBtn) {
            branchModalCloseBtn.addEventListener('click', closeBranchModal);
        }
        if (branchModalSearchButton) {
            branchModalSearchButton.addEventListener('click', handleBranchSearch);
        }
        if (branchModalSearchInput) {
            branchModalSearchInput.addEventListener('keydown', event => {
                if (event.key === 'Enter') {
                    event.preventDefault();
                    handleBranchSearch();
                }
            });
        }
        if (branchModalLocateButton) {
            branchModalLocateButton.addEventListener('click', handleBranchLocate);
        }
        if (branchModalLoadMore) {
            branchModalLoadMore.addEventListener('click', loadMoreBranches);
        }
        document.addEventListener('keydown', event => {
            if (event.key === 'Escape' && branchModal && !branchModal.classList.contains('is-hidden')) {
                closeBranchModal();
            }
        });

        // 페이지 로드 시 실행
        updateHeaderBranch();

        // 매장 선택 변경 이벤트 리스너
        window.addEventListener('branchSelection:change', updateHeaderBranch);
    })();
    </script>
</c:if>

</body>
</html>
